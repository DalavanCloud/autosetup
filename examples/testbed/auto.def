# vim:se syn=tcl:
#
# Example auto.def which shows how to use various commands
# and features.
#

use cc cc-lib cc-db pkg-config

options {
	# Comment lines are allowed in options
	shared    => "Create a shared library"
	utf8=1    => "Disable utf8 support"
	# --lfs is a synonym for --largefile
	lfs=1 largefile=1 => "Disable large file support"
	opt1:value => "Options with a value"
	opt2:=value => "Option with optional value"
}

# In general, the cc-check-* commands return true
# if all the tests succeed.
if {[cc-check-types "long long"]} {
	cc-check-sizeof "long long"
}

# Create our own test for 'volatile'
msg-checking "Checking for volatile..."
if {[cctest -code {volatile int _x = 0;}]} {
	msg-result ok
	define-feature volatile
} else {
	msg-result no
	define-feature volatile 0
}

# Or even simpler. Compile the code and define 'const' appropriately
check-feature const {
	cctest -code {const int _x = 0;}
}

define EXTRA_CFLAGS ""

# Does the C compiler understand -std=c99?
check-feature -std=c99 {
	cctest -cflags {-std=c99}
}
# Could check the return code of check-feature instead
if {[have-feature -std=c99]} {
	define-append EXTRA_CFLAGS -std=c99 -fpedantic {-Dversion="my version"}
}
define version1 "with spaces"

# Many apps want to know if they are building with gcc (or at least a compatible compiler)
cc-check-decls __GNUC__

cc-check-includes netinet/in.h

# autosetup will check for the existence of any include files
# mentioned in -includes before including them, silently excluding
# any which don't exist.
#
cc-with {-includes {sys/socket.h blah/blah.h}} {
	cc-check-members "struct msghdr.msg_control"
}
cc-with {-includes sys/stat.h} {
	cc-check-members "struct stat.st_mtime" "struct stat.st_atime" "struct stat.st_size"
}
cc-check-function-in-lib percent_m wrap

# Checking the same thing twice is automatically cached
cc-check-includes sys/socket.h sys/stat.h

use cc-lib
if {[opt-bool lfs largefile]} {
	cc-check-lfs
}
cc-check-endian

# Now try some C++ features
# Does the C compiler understand -fno-rtti?
check-feature -fno-rtti {
	cctest -lang c++ -cflags -fno-rtti
}

# What about general features using the c++ compiler?
# First C
cc-with {-cflags -std=c89} {
	cc-check-types bool
}
# Now C++
cc-with {-lang c++} {
	cc-check-types bool
}

# libs are in reverse (nested) order
# libs will be in this order: -ldl -lc -lm
cc-with {-libs {-lc -lm}} {
	cc-with {-libs -ldl} {
		cc-check-functions dlopen
	}
}

# While -includes and -cflags are in the order given
cc-with {-cflags -DX=1} {
	cc-with {-cflags -UX} {
		check-feature flags-order {
			cctest -code {
				#ifdef X
				#error X should not be defined
				#endif
			}
		}
	}
}

cc-with {-nooutput 1} {
	check-feature warning-as-error {
		cctest -code {
			#warning This warning should be treated as an error
		}
	}
}
check-feature warning-ignored {
	cctest -code {
		#warning This warning should be ignored
	}
}

# cc-check-decls recognises both defines and rvalues
cc-check-includes stdio.h
cc-with {-cflags -DABC -includes stdio.h} {
	cc-check-decls ABC fopen
}

# some things which definitely won't exist
cc-check-functions blahfunc
cc-check-decls blahdecl
cc-check-defines blahdef
cc-check-types blahtype
cc-check-sizeof blahtype

define _TEST
define PACKAGE_NAME testbed
define PACKAGE_VERSION 1.0

define TRUEVAL
define FALSEVAL 0
define EMPTYVAL ""
define STRVAL strval

# And apply these settings for the rest of the file
cc-with {-lang c++}

# Test pkg-config, where pkg-config support is optional
if {[pkg-config-init 0]} {
	pkg-config pango >= 1.37.0
	pkg-config zlib
	pkg-config nonexistent
}

make-config-header config.h -auto "_* PACKAGE_*"
make-template Makefile.in
# And a template in a subdir too
make-template subdir/Makefile.in

# For illustration purposes, create a template containing all known variables

set f [open template.in w]
# We want these sorted.
foreach n [lsort [dict keys [all-defines]]] {
	puts $f "$n=@$n@"
}
close $f

# And process the template. Note that we need to explictly
# specify that the template is in the build directory, not
# the source directory
make-template [get-define builddir]/template.in
