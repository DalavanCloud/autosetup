# vim:se syn=tcl:
#
# Example auto.def which shows how to use various commands
# and features.
#

use cc

options {
	shared    => "Create a shared library"
	utf8=1    => "Disable utf8 support"
	largefile=1 => "Disable large file support"
}

# In general, the cc-check-* commands return true
# if all the tests succeed.
if {[cc-check-types "long long"]} {
	cc-check-sizeof "long long"
}

# Create our own test for 'volatile'
msg-checking "Checking for volatile..."
if {[cctest -code {volatile int _x = 0;}]} {
	msg-result ok
	define-feature volatile
} else {
	msg-result no
	define-feature volatile 0
}

# Or even simpler. Compile the code and define 'const' appropriately
check-feature const {
	cctest -code {const int _x = 0;}
}

define EXTRA_CFLAGS ""

# Does the C compiler understand -std=c99?
check-feature -std=c99 {
	cctest -cflags {-std=c99}
}
# Could check the return code of check-feature instead
if {[have-feature -std=c99]} {
	define-append EXTRA_CFLAGS -std=c99
}

# Note that autosetup will complain about the use of the following headers
# if they haven't been checked, so check them now.
cc-check-includes sys/socket.h sys/stat.h
cc-with {-includes sys/socket.h} {
	cc-check-members "struct msghdr.msg_control"
}
cc-with {-includes sys/stat.h} {
	cc-check-members "struct stat.st_mtime" "struct stat.st_atime" "struct stat.st_size"
}
cc-check-function-in-lib percent_m wrap

# The equivalent of the AC_SYS_LARGEFILE macro
if {[opt-bool largefile]} {
	cc-check-includes sys/types.h
	msg-checking "Checking if -DFILE_OFFSET_BITS=64 is needed..."
	if {[msg-quiet cc-with {-includes sys/types.h} {cc-check-sizeof off_t}] == 8} {
		msg-result no
	} elseif {[msg-quiet cc-with {-includes sys/types.h -cflags -D_FILE_OFFSET_BITS=64} {cc-check-sizeof off_t}] == 8} {
		define _FILE_OFFSET_BITS 64
		msg-result yes
	} else {
		user-error "LFS not available"
	}
}

# Now try some C++ features
# Does the C compiler understand -fno-rtti?
check-feature -fno-rtti {
	cctest -lang c++ -cflags -fno-rtti
}

# What about general features using the c++ compiler?
# First C
cc-with {-cflags -std=c89} {
	cc-check-types bool
}
# Now C++
cc-with {-lang c++} {
	cc-check-types bool
}

# libs are in reverse (nested) order
# libs will be in this order: -ldl -lc -lm
cc-with {-libs {-lc -lm}} {
	cc-with {-libs -ldl} {
		cc-check-functions dlopen
	}
}

# While -includes and -cflags are in the order given
cc-with {-cflags -DX=1} {
	cc-with {-cflags -UX} {
		check-feature flags-order {
			cctest -code {
				#ifdef X
				#error X should not be defined
				#endif
			}
		}
	}
}

# And apply these settings for the rest of the file
cc-with {-lang c++}

make-autoconf-h config.h {HAVE_* SIZEOF_* _*}
make-template Makefile.in

# For illustration purposes, create a template containing all known variables

set f [open template.in w]
# We want these sorted.
foreach n [lsort [dict keys [all-defines]]] {
	puts $f "$n=@$n@"
}
close $f

# And process the template
make-template template.in
